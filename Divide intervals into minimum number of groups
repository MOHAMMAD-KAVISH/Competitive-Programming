class Solution {
public:
    int minGroups(vector<vector<int>>& intervals) {
    vector<pair<int, int>> events;

    for (const auto& interval : intervals) {
        events.push_back({interval[0], 1});       // Start of an interval
        events.push_back({interval[1] + 1, -1});  // End of an interval
    }

    // Sort events by time. If two events have the same time, process 'end' (-1) before 'start' (+1).
    sort(events.begin(), events.end());

    int active = 0;  // Current active intervals
    int maxActive = 0;  // Maximum active intervals at any time

    // Process all events
    for (const auto& event : events) {
        active += event.second;  // Update the active interval count
        maxActive = max(maxActive, active);  // Track the max number of active intervals
    }

    return maxActive; 
    }
};
