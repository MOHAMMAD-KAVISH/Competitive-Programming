/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {
        ListNode* dummy = new ListNode(-1);
        dummy->next = list1;
        
        // Find the ath and bth nodes in list1
        ListNode* aPrev = dummy;
        for (int i = 0; i < a ; ++i) {
            aPrev = aPrev->next;
        }
        ListNode* bNode = aPrev->next;
        for (int i = 0; i < b - a ; ++i) {
            bNode = bNode->next;
        }
        
        // Connect the ath-1 node to the head of list2
        aPrev->next = list2;
        
        // Find the tail of list2
        ListNode* tail = list2;
        while (tail->next) {
            tail = tail->next;
        }
        
        // Connect the tail of list2 to the bth node
        tail->next = bNode->next;
        
        // Return the head of list1
        return dummy->next;
    }
};
