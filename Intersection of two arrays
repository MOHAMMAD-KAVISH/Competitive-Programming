#include <vector>
#include <unordered_set>
#include <algorithm>

using namespace std;

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> seen(nums1.begin(), nums1.end());
        vector<int> result;
        
        for (int num : nums2) {
            if (seen.count(num)) {
                result.push_back(num);
                seen.erase(num); // Remove the element to avoid duplicates
            }
        }
        
        return result;
    }
};


class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int>res;
        unordered_map<int,int>count1,count2;
        for(int i:nums1){
            count1[i]++;
        }
        for(int j:nums2){
            count2[j]++;
        }
        for(auto pair:count1){
            int v=pair.first;
            if(count2.find(v)!=count2.end()){
                int mini=min(pair.second,count2[v]);
                    for(int i=0;i<mini;i++){
                        res.push_back(v);
                    }
                
            }
        }
        return res;
    }
};



#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
    // Sort both arrays
    sort(nums1.begin(), nums1.end());
    sort(nums2.begin(), nums2.end());

    vector<int> result;
    int i = 0, j = 0;

    // Use two pointers to find common elements
    while (i < nums1.size() && j < nums2.size()) {
        if (nums1[i] < nums2[j]) {
            i++;
        } else if (nums1[i] > nums2[j]) {
            j++;
        } else {
            result.push_back(nums1[i]);
            i++;
            j++;
        }
    }

    return result;
}

int main() {
    vector<int> nums1 = {1, 2, 2, 1};
    vector<int> nums2 = {2, 2};
    vector<int> result = intersect(nums1, nums2);
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;  // Output: 2 2

    vector<int> nums3 = {4, 9, 5};
    vector<int> nums4 = {9, 4, 9, 8, 4};
    result = intersect(nums3, nums4);
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;  // Output: 4 9 (or 9 4)

    return 0;
}
