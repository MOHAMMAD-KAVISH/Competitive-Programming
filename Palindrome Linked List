#include <iostream>

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return true; // An empty list or a single node is considered a palindrome
        }
        
        // Find the middle of the linked list using the two-pointer technique
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast->next != nullptr && fast->next->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        // Reverse the second half of the linked list
        ListNode* secondHalf = reverseList(slow->next);
        
        // Compare the first half with the reversed second half
        ListNode* firstHalf = head;
        while (secondHalf != nullptr) {
            if (firstHalf->val != secondHalf->val) {
                return false; // The list is not a palindrome
            }
            firstHalf = firstHalf->next;
            secondHalf = secondHalf->next;
        }
        
        return true; // The list is a palindrome
    }
    
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        
        while (curr != nullptr) {
            ListNode* nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;
        }
        
        return prev;
    }
};

// Function to print the linked list
void printList(ListNode* head) {
    ListNode* curr = head;
    while (curr != nullptr) {
        std::cout << curr->val << " ";
        curr = curr->next;
    }
    std::cout << std::endl;
}

int main() {
    // Example 1
    ListNode* head1 = new ListNode(1);
    head1->next = new ListNode(2);
    head1->next->next = new ListNode(2);
    head1->next->next->next = new ListNode(1);
    Solution solution;
    std::cout << "Example 1: " << (solution.isPalindrome(head1) ? "true" : "false") << std::endl;
    
    // Example 2
    ListNode* head2 = new ListNode(1);
    head2->next = new ListNode(2);
    std::cout << "Example 2: " << (solution.isPalindrome(head2) ? "true" : "false") << std::endl;
    
    return 0;
}
