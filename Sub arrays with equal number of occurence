#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
    long long countSubarraysWithEqualXY(const vector<int>& arr, int x, int y) {
        unordered_map<long long, long long> prefixSumCount;
        long long prefixSum = 0;
        long long result = 0;

        // Initialize the map with prefixSum 0 to handle cases where a valid subarray starts from index 0.
        prefixSumCount[0] = 1;

        for (int val : arr) {
            // Update prefix sum based on current element
            if (val == x) {
                prefixSum += 1;
            } else if (val == y) {
                prefixSum -= 1;
            }

            // If the prefixSum has been seen before, add the number of occurrences to the result.
            if (prefixSumCount.find(prefixSum) != prefixSumCount.end()) {
                result += prefixSumCount[prefixSum];
            }

            // Increment the count of the current prefixSum in the map.
            prefixSumCount[prefixSum]++;
        }

        return result;
    }
};

int main() {
    Solution sol;
    vector<int> arr1 = {1, 2, 1};
    cout << sol.countSubarraysWithEqualXY(arr1, 1, 2) << endl;  // Output: 2

    vector<int> arr2 = {1, 2, 1};
    cout << sol.countSubarraysWithEqualXY(arr2, 4, 6) << endl;  // Output: 6

    vector<int> arr3 = {1, 2, 1};
    cout << sol.countSubarraysWithEqualXY(arr3, 1, 4) << endl;  // Output: 1

    return 0;
}
