class Solution {
public:
    
    void left(Node* root,vector<int>&res){
        Node* curr=root->left;
        while(curr){
        if(!isleaf(curr)) res.push_back(curr->data);
        if(curr->left) curr=curr->left;
        else curr=curr->right;
        }
    }
    
    void right(Node* root,vector<int>&res){
        Node* curr=root->right;
        stack<int>st;
        while(curr){
            if(!isleaf(curr)) st.push(curr->data);
            if(curr->right) curr=curr->right;
            else curr=curr->left;
        }
        while(!st.empty()){
            res.push_back(st.top());
            st.pop();
        }
    }
    void leaf(Node* root,vector<int>&res){
        if(isleaf(root)){
            res.push_back(root->data);
            return;
        }
        if(root->left) leaf(root->left,res);
        if(root->right) leaf(root->right,res);
    }
    bool isleaf(Node* node){
        return !node->left&&!node->right;
    }
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int>res;
        if(!root) return res;
        if(!isleaf(root)) res.push_back(root->data);
        
        left(root,res);
        leaf(root,res);
        right(root,res);
        return res;
    }
};
