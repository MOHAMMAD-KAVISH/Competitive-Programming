#include <vector>
#include <unordered_set>

class Solution {
public:
    bool validPath(int n, std::vector<std::vector<int>>& edges, int source, int destination) {
        // Construct adjacency list representation of the graph
        std::vector<std::unordered_set<int>> adjList(n);
        for (const auto& edge : edges) {
            adjList[edge[0]].insert(edge[1]);
            adjList[edge[1]].insert(edge[0]); // Since it's a bidirectional graph
        }
        
        // Initialize visited array
        std::vector<bool> visited(n, false);
        
        // Perform DFS
        return dfs(source, destination, adjList, visited);
    }
    
    bool dfs(int source, int destination, const std::vector<std::unordered_set<int>>& adjList, std::vector<bool>& visited) {
        // Mark the current vertex as visited
        visited[source] = true;
        
        // If the current vertex is the destination, return true
        if (source == destination) {
            return true;
        }
        
        // Traverse all adjacent vertices of the current vertex
        for (int neighbor : adjList[source]) {
            // If the neighbor hasn't been visited yet, recursively visit it
            if (!visited[neighbor]) {
                if (dfs(neighbor, destination, adjList, visited)) {
                    return true;
                }
            }
        }
        
        // If no valid path is found from this vertex, return false
        return false;
    }
};
