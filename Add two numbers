/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head = nullptr; // Head of the result list
        ListNode* tail = nullptr; // Tail of the result list
        int carry = 0;

        // Traverse both lists until both are exhausted
        while (l1 != nullptr || l2 != nullptr || carry != 0) {
            int sum = carry;
            if (l1 != nullptr) {
                sum += l1->val;
                l1 = l1->next;
            }
            if (l2 != nullptr) {
                sum += l2->val;
                l2 = l2->next;
            }
            carry = sum / 10;
            ListNode* newNode = new ListNode(sum % 10);

            if (head == nullptr) {
                // If this is the first node, set both head and tail to it
                head = newNode;
                tail = newNode;
            } else {
                // Otherwise, append the new node to the tail
                tail->next = newNode;
                tail = newNode;
            }
        }

        return head;
    }
};
