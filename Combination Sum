class Solution {
public:
    void dfs(vector<int>&candidates,int target,vector<vector<int>>&res,vector<int>&combination,int start){
        if(target==0){
            res.push_back(combination);
            return;
        }
        for(int i=start;i<candidates.size();i++){
            if(candidates[i]<=target){
                combination.push_back(candidates[i]);
                dfs(candidates,target-candidates[i],res,combination,i);
                combination.pop_back();
            }
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>>res;
        vector<int>combination;
        dfs(candidates,target,res,combination,0);
        return res;
    }
};
