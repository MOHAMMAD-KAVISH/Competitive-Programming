#include <iostream>
#include <vector>
#include <stack>
using namespace std;

int maxWidthRamp(vector<int>& nums) {
    int n = nums.size();
    stack<int> s;
    
    // Step 1: Build a decreasing stack of indices
    for (int i = 0; i < n; ++i) {
        if (s.empty() || nums[s.top()] > nums[i]) {
            s.push(i);
        }
    }
    
    int max_width = 0;
    
    // Step 2: Traverse from the right and calculate the max ramp width
    for (int j = n - 1; j >= 0; --j) {
        while (!s.empty() && nums[s.top()] <= nums[j]) {
            max_width = max(max_width, j - s.top());
            s.pop();
        }
    }
    
    return max_width;
}

int main() {
    vector<int> nums1 = {6, 0, 8, 2, 1, 5};
    cout << "Max width ramp: " << maxWidthRamp(nums1) << endl;  // Output: 4

    vector<int> nums2 = {9, 8, 1, 0, 1, 9, 4, 0, 4, 1};
    cout << "Max width ramp: " << maxWidthRamp(nums2) << endl;  // Output: 7

    return 0;
}
