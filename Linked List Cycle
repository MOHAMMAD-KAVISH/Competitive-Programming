struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (!head || !head->next) return false; // If the list is empty or has only one node, there can't be a cycle
        
        ListNode *slow = head;
        ListNode *fast = head->next;
        
        while (fast && fast->next) {
            if (slow == fast) return true; // Cycle detected
            
            slow = slow->next;
            fast = fast->next->next;
        }
        
        return false; // Fast pointer reached the end, no cycle detected
    }
};
