#include <vector>
#include <queue>
using namespace std;

int isTree(int n, int m, vector<vector<int>> &adj) {
    if (m != n - 1) {
        return 0; // If the number of edges is not equal to n-1, it cannot be a tree.
    }

    // Adjacency list representation of the graph
    vector<vector<int>> graph(n);
    for (auto edge : adj) {
        graph[edge[0]].push_back(edge[1]);
        graph[edge[1]].push_back(edge[0]);
    }

    // Check connectivity using BFS
    vector<bool> visited(n, false);
    queue<int> q;
    q.push(0);
    visited[0] = true;
    int visitedNodes = 1;

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
                visitedNodes++;
            }
        }
    }

    // Check if all nodes are visited
    return visitedNodes == n ? 1 : 0;
}
