/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long long kthLargestLevelSum(TreeNode* root, int k) {
        if(!root) return -1;
        queue<TreeNode*>q;
        q.push(root);
        priority_queue<long long,vector<long long>,greater<long long>>heap;
        while(!q.empty()){
            int s=q.size();
            long long c=0;
            for(int i=0;i<s;i++){
                TreeNode* node=q.front();
                q.pop();
                c+=node->val;

                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            heap.push(c);
            if(heap.size()>k){
                heap.pop();
            }
        }
        return heap.size()==k?heap.top():-1;
    }
};
