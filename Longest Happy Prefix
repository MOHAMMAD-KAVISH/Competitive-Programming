#include <vector>
#include <string>

class Solution {
public:
    std::string longestPrefix(std::string s) {
        int n = s.size();
        std::vector<int> lps(n, 0); // lps[i] stores the length of the longest proper prefix that is also a suffix for s.substr(0, i + 1)
        
        // Build the lps array
        int len = 0; // Length of the previous longest proper prefix that is also a suffix
        int i = 1;
        
        while (i < n) {
            if (s[i] == s[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1]; // Try to find a shorter prefix
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        
        // Return the longest happy prefix
        int longest = lps.back();
        return s.substr(0, longest);
    }
};
