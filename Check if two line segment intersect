#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++
struct Point 
{ 
    long long x,y;
}; 
  
// Given three collinear points p, q, r, the function checks if 
// point q lies on line segment 'pr' 
bool onSegment(Point p, Point q, Point r) 
{ 
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) && 
        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y)) 
       return true; 
  
    return false; 
} 
  
// To find orientation of ordered triplet (p, q, r). 
// The function returns following values 
// 0 --> p, q and r are collinear 
// 1 --> Clockwise 
// 2 --> Counterclockwise 
int orientation(Point p, Point q, Point r) 
{ 
    // See https://www.geeksforgeeks.org/orientation-3-ordered-points/ 
    // for details of below formula. 
    long long val = (q.y - p.y) * (r.x - q.x) - 
              (q.x - p.x) * (r.y - q.y); 
  
    if (val == 0) return 0;  // collinear 
  
    return (val > 0)? 1: 2; // clock or counterclock wise 
} 

class Solution {
  public:
    string doIntersect(int p1[], int q1[], int p2[], int q2[]) {
        // code here
        Point P1 = {p1[0], p1[1]};
    Point Q1 = {q1[0], q1[1]};
    Point P2 = {p2[0], p2[1]};
    Point Q2 = {q2[0], q2[1]};

    // Find the four orientations needed for general and special cases
    int o1 = orientation(P1, Q1, P2);
    int o2 = orientation(P1, Q1, Q2);
    int o3 = orientation(P2, Q2, P1);
    int o4 = orientation(P2, Q2, Q1);

    // General case
    if (o1 != o2 && o3 != o4) {
        return "true";
    }

    // Special Cases
    // P1, Q1 and P2 are collinear and P2 lies on segment P1Q1
    if (o1 == 0 && onSegment(P1, P2, Q1)) return "true";

    // P1, Q1 and Q2 are collinear and Q2 lies on segment P1Q1
    if (o2 == 0 && onSegment(P1, Q2, Q1)) return "true";

    // P2, Q2 and P1 are collinear and P1 lies on segment P2Q2
    if (o3 == 0 && onSegment(P2, P1, Q2)) return "true";

    // P2, Q2 and Q1 are collinear and Q1 lies on segment P2Q2
    if (o4 == 0 && onSegment(P2, Q1, Q2)) return "true";

    return "false";
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int p1[2], q1[2], p2[2], q2[2];
        cin >> p1[0] >> p1[1] >> q1[0] >> q1[1] >> p2[0] >> p2[1] >> q2[0] >> q2[1];
        // if (q2[1] == -2) {
        //     cout << "true" << endl;
        //     return 0;
        // }
        Solution ob;
        // int a = ob.doIntersect(p1, q1, p2, q2);
        // if (a)
        cout << ob.doIntersect(p1, q1, p2, q2) << "\n";
    }
}
