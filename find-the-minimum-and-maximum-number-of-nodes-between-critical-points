/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        vector<int>cp;
        ListNode* prev=head;
        ListNode* curr=head->next;
        int pos=1;
        while(curr->next!=NULL){
            if((curr->val>prev->val&&curr->val>curr->next->val)||(curr->val<prev->val&&curr->val<curr->next->val)){
                cp.push_back(pos);
            }
            prev=curr;
            curr=curr->next;
            pos++;
        }
        if(cp.size()<2){
            return{-1,-1};
        }
        int mini=INT_MAX;
        int maxi=cp.back()-cp.front();
        for(size_t i=1;i<cp.size();i++){
            mini=min(mini,cp[i]-cp[i-1]);
        }
        return {mini,maxi};
    }
};
