#include <bits/stdc++.h>
using namespace std;

class Solution{
public:
    string findOrder(string dict[], int N, int K) {
        vector<int> adj[K];
        
        // Step 1: Create the graph
        for (int i = 0; i < N - 1; i++) {
            string word1 = dict[i];
            string word2 = dict[i + 1];
            for (int j = 0; j < min(word1.size(), word2.size()); j++) {
                if (word1[j] != word2[j]) {
                    adj[word1[j] - 'a'].push_back(word2[j] - 'a');
                    break;
                }
            }
        }
        
        // Step 2: Topological sort using BFS (Kahn's Algorithm)
        vector<int> inDegree(K, 0);
        for (int i = 0; i < K; i++) {
            for (int v : adj[i]) {
                inDegree[v]++;
            }
        }
        
        queue<int> q;
        for (int i = 0; i < K; i++) {
            if (inDegree[i] == 0) {
                q.push(i);
            }
        }
        
        string order;
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            order += (u + 'a');
            
            for (int v : adj[u]) {
                inDegree[v]--;
                if (inDegree[v] == 0) {
                    q.push(v);
                }
            }
        }
        
        return order;
    }
};
