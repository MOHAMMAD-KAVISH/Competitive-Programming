#include <bits/stdc++.h>
using namespace std;

int minimumCostPath(vector<vector<int>>& grid) {
    int n = grid.size();
    
    // Directions for up, down, left, right
    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    
    // Cost array initialized to infinity
    vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
    dist[0][0] = grid[0][0];

    // Min-heap priority queue
    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
    pq.push({grid[0][0], {0, 0}});
    
    while (!pq.empty()) {
        // Extract the current cell and its cost
        pair<int, pair<int, int>> top = pq.top();
        pq.pop();
        
        int current_cost = top.first;
        int x = top.second.first;
        int y = top.second.second;
        
        // If we reach the bottom-right cell, return the cost
        if (x == n - 1 && y == n - 1) {
            return current_cost;
        }
        
        // Explore all 4 possible directions
        for (auto& dir : directions) {
            int nx = x + dir.first;
            int ny = y + dir.second;
            
            if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
                int new_cost = current_cost + grid[nx][ny];
                
                if (new_cost < dist[nx][ny]) {
                    dist[nx][ny] = new_cost;
                    pq.push({new_cost, {nx, ny}});
                }
            }
        }
    }
    
    // Return -1 if no path found, although there should always be a path in a valid grid
    return -1;
}

// Test cases
int main() {
    vector<vector<int>> grid1 = {
        {9, 4, 9, 9},
        {6, 7, 6, 4},
        {8, 3, 3, 7},
        {7, 4, 9, 10}
    };
    
    vector<vector<int>> grid2 = {
        {4, 4},
        {3, 7}
    };
    
    cout << minimumCostPath(grid1) << endl; // Output: 43
    cout << minimumCostPath(grid2) << endl; // Output: 14
    
    return 0;
}
