class Solution {
public:
    long long int merge(long long arr[], long long temp[], int left, int mid, int right) {
        int i = left;  // Starting index for left subarray
        int j = mid + 1;  // Starting index for right subarray
        int k = left;  // Starting index to be sorted
        long long int inv_count = 0;

        while ((i <= mid) && (j <= right)) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                inv_count += (mid - i + 1);
            }
        }

        while (i <= mid) {
            temp[k++] = arr[i++];
        }

        while (j <= right) {
            temp[k++] = arr[j++];
        }

        for (i = left; i <= right; i++) {
            arr[i] = temp[i];
        }

        return inv_count;
    }

    long long int mergesort(long long arr[], long long temp[], int left, int right) {
        long long int inv_count = 0;
        if (left < right) {
            int mid = left + (right - left) / 2;

            inv_count += mergesort(arr, temp, left, mid);
            inv_count += mergesort(arr, temp, mid + 1, right);
            inv_count += merge(arr, temp, left, mid, right);
        }
        return inv_count;
    }

    long long int inversionCount(long long arr[], int n) {
        long long temp[n];
        return mergesort(arr, temp, 0, n - 1);
    }
};
