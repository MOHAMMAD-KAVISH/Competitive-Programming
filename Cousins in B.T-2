/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        if (!root) return nullptr;

        // Initialize queue for BFS traversal
        queue<TreeNode*> q;
        q.push(root);

        // Set root node value to 0 since it has no cousins
        root->val = 0;

        // Start BFS level order traversal
        while (!q.empty()) {
            int levelSize = q.size();
            long long levelSum = 0;

            // Track the sum of children for each parent
            unordered_map<TreeNode*, long long> parentSum;

            // First pass: Calculate the level sum and record parent-child sums
            vector<pair<TreeNode*, TreeNode*>> children;  // (child, parent)
            for (int i = 0; i < levelSize; ++i) {
                TreeNode* node = q.front();
                q.pop();

                if (node->left) {
                    q.push(node->left);
                    children.emplace_back(node->left, node);
                    parentSum[node] += node->left->val;
                    levelSum += node->left->val;
                }

                if (node->right) {
                    q.push(node->right);
                    children.emplace_back(node->right, node);
                    parentSum[node] += node->right->val;
                    levelSum += node->right->val;
                }
            }

            // Second pass: Assign the correct cousin sum to each child
            for (auto& [child, parent] : children) {
                long long siblingSum = parentSum[parent];  // Sum of siblings under the same parent
                child->val = levelSum - siblingSum;  // Cousin sum calculation
            }
        }

        return root;
    }
};
