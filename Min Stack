 class MinStack {
 public:
    stack<int>s,ms;
    MinStack() {
       
    }
   
    void push(int val) {
        s.push(val);
        if(ms.empty()||val<=ms.top()){
            ms.push(val);
        }
    }
   
    void pop() {
        if(s.top()==ms.top()){
            ms.pop();
        }
        s.pop();
    }
   
    int top() {
        return s.top();
    }
   
    int getMin() {
        return ms.top();
    }
 };




using namespace std;
class MinStack {
public:
stack<pair<int,int>>s;
    MinStack() {
        
    }
    
    void push(int val) {
        int mine=s.empty()?val:min(val,s.top().second);
        s.push({val,mine});
    }
    
    void pop() {
        s.pop();
    }
    
    int top() {
        return s.top().first;
    }
    
    int getMin() {
        return s.top().second;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
