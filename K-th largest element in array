class Solution {
public:
    int partition(vector<int>&nums,int l,int h){
        int pivot=nums[h];
        int i=l-1;
        for(int j=l;j<h;j++){
            if(nums[j]<pivot){
                i++;
                swap(nums[i],nums[j]);
            }
        }
        swap(nums[i+1],nums[h]);
        return(i+1);
    }
    int quick(vector<int>&nums,int l,int h,int k){
        if(l<=h){
            int pi=partition(nums,l,h);
            if(pi==k){
                return nums[pi];
            }else if(pi>k){
                return quick(nums,l,pi-1,k);
            }else{
                return quick(nums,pi+1,h,k);
            }
        }
        return -1;
    }
    int findKthLargest(vector<int>& nums, int k) {
        int n=nums.size();
        return quick(nums,0,n-1,n-k);
    }
};
