#include <iostream>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        // Base cases
        if (root1 == nullptr && root2 == nullptr) return true;
        if (root1 == nullptr || root2 == nullptr) return false;
        if (root1->val != root2->val) return false;

        // Check two configurations:
        // 1. Without flipping: Left with Left and Right with Right
        // 2. With flipping: Left with Right and Right with Left
        return (flipEquiv(root1->left, root2->left) && flipEquiv(root1->right, root2->right)) ||
               (flipEquiv(root1->left, root2->right) && flipEquiv(root1->right, root2->left));
    }
};

// Helper function to create a tree from an array representation (for testing)
TreeNode* createTree(vector<int> arr, int index = 0) {
    if (index >= arr.size() || arr[index] == -1) return nullptr;
    TreeNode* root = new TreeNode(arr[index]);
    root->left = createTree(arr, 2 * index + 1);
    root->right = createTree(arr, 2 * index + 2);
    return root;
}

// Main function to test the solution
int main() {
    // Example 1
    vector<int> tree1 = {1, 2, 3, 4, 5, 6, -1, -1, -1, 7, 8};
    vector<int> tree2 = {1, 3, 2, -1, 6, 4, 5, -1, -1, -1, -1, 8, 7};
    TreeNode* root1 = createTree(tree1);
    TreeNode* root2 = createTree(tree2);

    Solution sol;
    cout << (sol.flipEquiv(root1, root2) ? "true" : "false") << endl;  // Output: true

    return 0;
}
