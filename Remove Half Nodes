#include <iostream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

TreeNode* removeHalfNodes(TreeNode* root) {
    if (!root) return nullptr;
    
    root->left = removeHalfNodes(root->left);
    root->right = removeHalfNodes(root->right);
    
    // If this is a half node with only one child
    if (!root->left && root->right) return root->right;
    if (root->left && !root->right) return root->left;
    
    return root;
}

void inorderTraversal(TreeNode* root) {
    if (!root) return;
    inorderTraversal(root->left);
    cout << root->val << " ";
    inorderTraversal(root->right);
}

int main() {
    // Example 1: [5, 7, 8, 2]
    TreeNode* root = new TreeNode(5);
    root->left = new TreeNode(7);
    root->right = new TreeNode(8);
    root->left->left = new TreeNode(2);
    
    root = removeHalfNodes(root);
    inorderTraversal(root); // Output should be: 2 5 8
    cout << endl;
    
    // Example 2: [2, 7, 5]
    TreeNode* root2 = new TreeNode(2);
    root2->left = new TreeNode(7);
    root2->right = new TreeNode(5);
    
    root2 = removeHalfNodes(root2);
    inorderTraversal(root2); // Output should be: 7 2 5
    cout << endl;
    
    return 0;
}
