/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        unordered_set<int>del(to_delete.begin(),to_delete.end());
        vector<TreeNode*>res;
        root=dfs(root,del,res);
        if(root){
            res.push_back(root);
        }
        return res;
    }
    private:
    TreeNode* dfs(TreeNode* node,unordered_set<int>&del,vector<TreeNode*>&res){
        if(!node) return node;
        node->left=dfs(node->left,del,res);
        node->right=dfs(node->right,del,res);
        if(del.find(node->val)!=del.end()){
            if(node->left) res.push_back(node->left);
            if(node->right) res.push_back(node->right);
            delete node;
            return NULL;
        }
        return node;
    }
};
